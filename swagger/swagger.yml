swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /:
    post:
      tags:
      - ApiTestApp/controllersServerInfoController
      description: create ServerInfo
      operationId: ServerInfoController.Post
      parameters:
      - in: body
        name: body
        description: body for ServerInfo content
        required: true
        schema:
          $ref: '#/definitions/models.ServerInfo'
      responses:
        "201":
          description: '{int} models.ServerInfo'
        "403":
          description: body is empty
  /{objectId}:
    get:
      tags:
      - ApiTestApp/controllersObjectController
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - ApiTestApp/controllersObjectController
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - ApiTestApp/controllersObjectController
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /{uid}:
    get:
      tags:
      - ApiTestApp/controllersUserController
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - ApiTestApp/controllersUserController
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - ApiTestApp/controllersUserController
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /login:
    get:
      tags:
      - ApiTestApp/controllersUserController
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /logout:
    get:
      tags:
      - ApiTestApp/controllersUserController
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  models.MakeSessionResponse:
    title: MakeSessionResponse
    type: object
    properties:
      result_code:
        type: integer
        format: int32
      session_id:
        type: string
      temporary_common_key:
        type: string
      time_stamp:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.ResponseTmp:
    title: ResponseTmp
    type: object
    properties:
      result_code:
        type: integer
        format: int32
      time_stamp:
        type: integer
        format: int64
  models.ServerInfo:
    title: ServerInfo
    type: object
    properties:
      assert_hash:
        type: string
      maintenance_state:
        type: integer
        format: int64
      master_hash:
        type: string
      version:
        type: string
  models.Session:
    title: Session
    type: object
    properties:
      session_id:
        type: string
      temporary_common_key:
        type: string
      user_id:
        type: integer
        format: int64
  models.User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Username:
        type: string
tags:
- description: |
    Operations about object
- description: |
    Operations about Users
- description: |
    SessionController operations for Session
- description: |2
     ServerInfoController operations for ServerInfo
